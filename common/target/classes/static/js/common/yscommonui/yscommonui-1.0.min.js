var ysDialogWidth = $(window).width() * 0.85, ysDialogHeight = $(window).height() * 0.70, jzMsgBoxOpenFlag;

$(document).on('click', '.ysdropdown a', function() {
	$('.ysdropdown').hide();
});

$(document).on('click', function() {
	$('.add-new-tree-node-btn').removeClass('add-new-tree-node-btn-toggle').removeClass('selected');
	$('.ysdropdown').hide();
});

(function($) {
// YSDialog
	/*
	$(document).on('mouseover', '#yscontainer-close-icon', function() {
		$(this).removeClass("yscontainer-close-icon-default");
		$(this).addClass("yscontainer-close-icon-hover");
	})
	.on('mouseout', '#yscontainer-close-icon', function() {
		$(this).removeClass("yscontainer-close-icon-hover");
		$(this).addClass("yscontainer-close-icon-default");
	});
	*/

	$(document).on('click', '.ysdialog-close', function(){
		$(this).parents('[id^="YSDialog"]').closeDialog();
	});

	jzMsgBoxOpenFlag = false;
	$(document).on('click', '.ui-widget-overlay', function(){
		if (jzMsgBoxOpenFlag) {
			parent.$('#YSDialogjzMsgBox').closeDialog();
			$('#YSDialogjzMsgBoxTreeNode').closeDialog();
		}
	});

	$(document).on('click', '.ysdialog-iframe-close', function(){
		var ysdialogIframeId = parent.$('#'+window.frameElement.id).parent().attr('id');
		if(ysdialogIframeId){
			parent.$('#'+ysdialogIframeId).closeDialog();
		}else{
			parent.$('#'+window.frameElement.id).closest('.iziModal').closeDialog();
		}
		
	});

	$(window).resize(function(e) {
		if ($('#yscontainer-wrap').length > 0) {
			var ysContainerWidth = getYsContainerWidth();
			if(String(ysContainerWidth).indexOf("%")){
				$('#yscontainer-wrap').css("width", ysContainerWidth);
			}else{
				$('#yscontainer-wrap').width(getYsContainerWidth());
			}
			
			/*
			if ($('.ui-jqgrid-btable', $('#yscontainer-wrap')).length > 0) {
				$('.ui-jqgrid-btable', $('#yscontainer-wrap')).setGridWidth(getYsContainerWidth());
			}
			if ($('.ui-jqgrid-btable', $('#left-panel')).length > 0) {
				$('.ui-jqgrid-btable', $('#left-panel')).setGridWidth(parseInt($('#left-panel').css('min-width')) - 110);
			}
			*/

			if ($('.ui-jqgrid-btable', $('#yscontainer-wrap')).length > 0) {
				$('.ui-jqgrid-btable', $('#yscontainer-wrap')).setGridWidth(getYsContainerWidth());
			}
			if ($('.ui-jqgrid-btable', $('#left-panel')).length > 0) {
				$('.ui-jqgrid-btable', $('#left-panel')).setGridWidth(parseInt($('#left-panel').css('min-width')) - 110);
			}
		}
	});

	$.fn.closeDialog = function(options){
		if($(this).hasClass('iziModal')){
			$(this).YSModalDialog('close');
		}else{
			$(this).dialog('close');
		}
	}
	
	$.fn.YSDialog = function(options) {
		var dialogId,
		ysDialogOpt = {
			position: 'center',
			width: 'auto',
			height: 'auto',
			resize: 'auto',
			resizable: false,
			closeOnEscape: false,
			modal: true,
			create: function() {
			},
			open: function() {
				$('.formError').remove(); // Clear validation error message
				$(this).parent().focus();

				if (options && typeof options.dialogTitle === 'string') {
					$(this).dialog('option', 'title', removeMtag(options.dialogTitle));
				}
				else {
					$(this).dialog('option', 'title', '');
				}

				// Comment out for the compatibility with jquery 1.12.1
				//$(this).dialog('resize');

				if (typeof options === 'object' && typeof window[options.afterOpen] === 'function') {
					window[options.afterOpen]();
				}
			},
			close: function() {
				if (typeof options === 'object' && typeof window[options.afterClose] === 'function') {
					window[options.afterClose]();
				}
			}
		},
		ysDialogIframeOpt = {
				autoOpen: false,
				position: 'center',
				width: 'auto',
				height: 'auto',
				resizable: false,
				closeOnEscape: false,
				modal: true,
				open: function() {
					if (options && typeof options.dialogTitle === 'string') {
						$(this).dialog('option', 'title', removeMtag(options.dialogTitle));
					}
					else {
						$(this).dialog('option', 'title', '');
					}

					if (typeof options === 'object' && typeof window[options.afterOpen] === 'function') {
						window[options.afterOpen]();
					}
				},
				close: function() {
					if (typeof options === 'object' && typeof window[options.afterClose] === 'function') {
						window[options.afterClose]();
					}
				}
			}, optionObj={};

		if (typeof options != 'undefined' && typeof options.dialogId != 'undefined') {
			dialogId = options.dialogId;
		}
		else {
			dialogId = "";
		}

		if (typeof options === 'object') {
			optionObj = options;
		}

		if (optionObj.iframe) {
			if ($('#YSDialogIframe'+dialogId).length == 0) {
				$('body').append('<div id="YSDialogIframe'+dialogId+'" style="position:relative;overflow:hidden;display:none;margin:0px; padding: 0px;z-index:999999;">' +
						'<iframe id="ysIframe'+dialogId+'" name="ysIframe'+dialogId+'" width="100%" height="100%" marginWidth="0" marginHeight="0" frameBorder="0" scrolling="no"/></div>');
			}
		}
		else {
			if ($('#YSDialog'+dialogId).length == 0) {
				$('body').append('<div id="YSDialog'+dialogId+'" style="position:relative;overflow:hidden;display:none;margin:0px; padding: 0px;z-index:999999;"/><div id="loading-div"'+dialogId+' style="display: none; position: ' +
						' absolute; top: 0; left: 0; width: 100%; height: 100%;">' +
						' <div style="position: absolute; width: 100%; min-height: 100%; height: auto; opacity: .6; filter:Alpha(Opacity=60); background-color: #616161; z-index: 10000;"></div>' +
						' <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-image: url(' + getImageURL("loading_animate.gif") + ');'+
						' background-attachment: fixed; background-repeat: no-repeat; background-position: center; z-index:10001;"></div></div>');
			}
		}

		if (optionObj.dialogData) {
			$('#YSDialog'+dialogId).empty().html(optionObj.dialogData);
			$('#YSDialog'+dialogId).dialog(ysDialogOpt);
			setTimeout(function() {
				$('#YSDialog'+dialogId).css('min-height', 'inherit');
			}, 10);
		}
		else {
			this.unbind('click');
			this.click(function() {
				var ysDialogChild = $('#YSDialog'+dialogId).children(".ysdialog"),
					href = $(this).attr('href');

				if (optionObj.iframe) {
					$('#YSDialogIframe'+dialogId).dialog(ysDialogIframeOpt);
					$('#loading-div'+dialogId).height($(document).height());
					$('#loading-div'+dialogId).show();

					if (optionObj.postDataFormId) {
						$('#' + optionObj.postDataFormId).attr('target', 'ysIframe'+dialogId);
						$('#' + optionObj.postDataFormId).attr('action', href);
						$('#' + optionObj.postDataFormId).submit();
					}
					else {
						$('#ysIframe'+dialogId).attr('src', href);
					}

					$('#ysIframe'+dialogId).one('load', function() {
						let YSDialogIframe = $('#YSDialogIframe'+dialogId),
							ysIframe = $("#ysIframe"+dialogId);

						$('#loading-div'+dialogId).hide();

						YSDialogIframe.dialog('open');
						ysIframe.contents().find("body").css("margin", "0px");
						ysIframe.contents().find(".btn:last").addClass("btn-no-border");
						resizeYSDialogIframe($(this), dialogId);

						//for the compatibility with jquery 1.12.1
						if ($.fn.jquery > "1.10") {
							setTimeout(function(){
								YSDialogIframe.dialog('widget').position({my:"center", at:"center", of: window});
								YSDialogIframe.height(ysIframe.height());
							}, 100);
						}
					});
				}
				else {
					if (ysDialogChild.length > 0) {
						// move current contents of ysdialog to body
						ysDialogChild.appendTo($('body')).hide();
					}
					$('#YSDialog'+dialogId).empty();
					if (href && href.charAt(0) == '#') {
						$(href).css('display', 'block');
						// move current contents of ysdialog to the YSDialog div
						$(href).appendTo($('#YSDialog'+dialogId));
						$('#YSDialog'+dialogId).dialog(ysDialogOpt);

						//for the compatibility with jquery 1.12.1
						if ($.fn.jquery > "1.10") {
							$('#YSDialog'+dialogId).dialog('widget').position({my:"center", at:"center", of: window});
						}

						$("#YSDialog"+dialogId).find(".btn:last").addClass("btn-no-border");
						$("#YSDialog"+dialogId).css('height', 'auto');
					}
					else {
						$('#loading-div'+dialogId).height($(document).height());
						$('#loading-div'+dialogId).show();

						$('#YSDialog'+dialogId).load(href, optionObj, function() {
							$('#loading-div'+dialogId).hide();
							$(this).dialog(ysDialogOpt);
							$("#YSDialog"+dialogId).find(".btn:last").addClass("btn-no-border");
							if (optionObj.validationFormId) {
								$("#" + optionObj.validationFormId).validationEngine();
							}
							$("#YSDialog"+dialogId).css('height', 'auto');
						}).hide();
					}
				}
				return false;
			});
		}
	};

// YSContainer
	var ysContainer = '<div id="yscontainer_contents"><div id="yscontainer-close-icon" class="yscontainer-close-icon-default"/>' +
		'<div id="yscontainer-loading" style="height: 100px; background-image: url('+ getImageURL("container_loading.gif") +');background-repeat: no-repeat; background-position: center;"></div>';

	$(document).on('click', '#yscontainer-close-icon, .yscontainer-close', function(){
		$("#YSContainer").hide();
	});

	$.fn.YSContainer = function(options) {
		var self = this;
		this.html(ysContainer).trigger("change");
		$('#yscontainer-loading').css('width', getYsContainerWidth());
		var shadowBoxLeft = $('#yscontainer_contents');
		if (options && typeof options === 'string') {
			var ysContainerChild = shadowBoxLeft.children(".yscontainer");
			if (ysContainerChild.length > 0) {
				return false;
			}
			else {
				// move current contents of ysContainerChild to yscontainer_contents
				$(options).appendTo(shadowBoxLeft);
			}
		}
		// $('#YSContainer').YSContainer({url: "/admin/agreement/get-tree-data"});
		else {
			$.ajax({
				url: options.url,
				dataType: "html",
				type: "GET",
				async: true,
				cache: false,
				success: function(data){
					$('#yscontainer-loading').remove();
					shadowBoxLeft.append(data);

					$('#yscontainer-wrap').ready(function(){
						if ($(this).scrollTop() > 0) {
							// handle page scroll.
							var ysc = $('#YSContainer');
							if(ysc.offset()!=null){
							//$('#right-panel').height((ysc.offset().top + ysc.height()) * 3);
							}
							stickyScrollSwitch = true;
							$(window).scroll();
							setTimeout(function() {
								if(ysc.offset()!=null){
								//$('#right-panel').height(ysc.offset().top + ysc.height() - 60);
								}
							}, 500);
							lastScrollTop = $(this).scrollTop();
						}
						// handle after open function.
						if (options.afterOpen && typeof window[options.afterOpen] === "function") {
							window[options.afterOpen]();
						}
						self.YSFormInit();
					});


					if ($('.ui-jqgrid-btable', $('#yscontainer-wrap')).length > 0) {
						//$('.ui-jqgrid-btable', $('#yscontainer-wrap')).setGridWidth($('#right-panel-title').outerWidth() + 8);
						$(window).resize();
					}
				}
			});
		}
		this.show();
	};

	$.fn.YSDropdown = function(options) {
		$('#' + $(this).attr('id') + '-data').prepend('<div class="ysdropdown-before"></div>');
		$('#' + $(this).attr('id') + '-data').append('<div class="ysdropdown-after"></div>');

		this.click(function() {
			var thisPos = $(this).offset(), yscPos = $('#YSContainer').offset(),
				thisPosLeft = thisPos.left, thisPosTop = thisPos.top, ysDropdownMenu;

			if (yscPos) {
				if ($('.add-new-tree-node-btn').offsetParent().attr('id')) {
					thisPosLeft = thisPos.left-yscPos.left;
					thisPosTop = thisPos.top-yscPos.top;
				}
			}

			if (options && options.menuDataId) {
				ysDropdownMenu = $('#' + options.menuDataId);
			}
			else {
				ysDropdownMenu = $('#' + $(this).attr('id') + '-data');
				if (ysDropdownMenu.css('display') == 'none') {
					ysDropdownMenu.show();
					ysDropdownMenu.css({left: thisPosLeft - (ysDropdownMenu.outerWidth() - $(this).outerWidth())/2, top: thisPosTop + $(this).outerHeight() + 6});
					ysDropdownMenu.children('.ysdropdown-after').css({'left' : ysDropdownMenu.width()/2 - 5});
					ysDropdownMenu.children('.ysdropdown-before').css({'left' : ysDropdownMenu.width()/2 - 6});
					$(this).addClass("selected");
				}
				else {
					ysDropdownMenu.hide();
					$(this).removeClass("over").removeClass("selected");
				}
			}
			return false;
		});

		this.mouseover(function(){
			$(this).addClass("over");
		})
		.mouseout(function(){
			$(this).removeClass("over");
		});
	};

	$.fn.YSTable = function(options) {
		var params = {
			elemId: $(this).attr('id'),
			inputRows: $('#' + $(this).attr('id') + ' #page-number-input').val(),
			page: 1,
			rows: $('#' + $(this).attr('id') + ' #select-item-count-per-page').val(),
			postData: {
				page: function() {
					return getPage();
				},
				rows: function() {
					return getRows();
				}
			}
		};

		if (typeof options.postData === "object") {
			for (var property in options.postData) {
			    if (options.postData.hasOwnProperty(property)) {
			    	params.postData[property] = options.postData[property];
			    }
			}
		}

		function getPage() {
			return params.page;
		}

		function getRows() {
			return params.rows;
		}

		$('#' + params.elemId + ' #select-item-count-per-page').change(function() {
			params.rows = $(this).val();
			params.page = 1;
			reload();
		});

		$('#' + params.elemId + ' #page-number-info').change(function() {
			params.inputRows = parseInt($(this).find('#page-number-input').val());
			var dataMaxPageNum = parseInt($(this).find('#data-max-page-num').text());
			if (params.inputRows > dataMaxPageNum) {
				params.page = dataMaxPageNum;
			}
			else if (params.inputRows < 1) {
				params.page = 1;
			}
			else {
				params.page = params.inputRows;
			}

			reload();
		});

		$(document).off("click", '#' + params.elemId + " .pageNum").on("click", '#' + params.elemId + " .pageNum", function() {
			params.page = parseInt($(this).attr('val'));
			reload();
		});

		$('#' + params.elemId).on("reload", function() {
			params.page = 1;
			reload();
		});

		function reload() {
			$.get(options.url, params.postData, function(data) {
				$('#' + params.elemId + ' #ystable-data').empty();
				refreshItemNumberInfo(data);
				refreshPageNumberInfo(data);
				window[options.id + "Data"](data.rows);
			});
		}

		function refreshItemNumberInfo(data) {
			$('#' + params.elemId + ' #item-number-info').html(data.records + options.lang.maxNum + ((params.page-1)*params.rows + 1) + options.lang.startNum + ((params.page)*params.rows > data.records ? data.records : (params.page)*params.rows) + options.lang.endNum);
		}

		function refreshPageNumberInfo(data) {
			var maxPageNum = data.records % params.rows == 0 ? data.records / params.rows : Math.floor(data.records / params.rows) + 1,
				startPageNum = getStartPageNum(data.page, maxPageNum, options.pageNumShow),
				pageNumInfo = "";

			if(data.page <= 1 && data.page <= maxPageNum) {
				pageNumInfo += "<span class='fa fa-step-backward' style='cursor: default;  opacity: .35; filter:Alpha(Opacity=35);'></span>";
				pageNumInfo += "&nbsp;";
				pageNumInfo += "<span class='fa fa-play fa-flip-horizontal' style='cursor: default;  opacity: .35; filter:Alpha(Opacity=35);'></span>";
				pageNumInfo += "&nbsp;";
			}
			else {
				pageNumInfo += "<span class='pageNum' ' val='" + getMorePrevPageNum() + "'>" + "<span class='fa fa-step-backward' style='cursor: pointer;'></span>" + "</span>";
				pageNumInfo += "&nbsp;";
				pageNumInfo += "<span class='pageNum' ' val='" + getPrevPageNum() + "'>" + "<span class='fa fa-play fa-flip-horizontal' style='cursor: pointer;'></span>" + "</span>";
				pageNumInfo += "&nbsp;";
			}

			if(maxPageNum > 0) {
				pageNumInfo += '<span id="data-max-page-num">' + maxPageNum  + '</span>';
			}

			pageNumInfo += options.lang.inPage ;

			if(startPageNum > 0 && startPageNum <= maxPageNum) {
				pageNumInfo += "&nbsp;<input id='page-number-input' type='text' size='2' style='height: 20px; border: 1px solid;' maxlength='7' role='textbox' value='" + params.page + "' onkeydown='var k=event.keyCode;if((k <= 57 && k >= 48 || k <= 105 && k >= 96) || k == 13 || k == 108) return true; else return false'>&nbsp;</>";
			}

			pageNumInfo +=  options.lang.pageNum ;

			if(data.page > 0 && data.page < maxPageNum) {
				pageNumInfo += "&nbsp;";
				pageNumInfo += "<span class='pageNum'  val='" + getNextPageNum(maxPageNum) + "'>" + "<span class='fa fa-play' style='cursor: pointer;'></span>" + "</span>";
				pageNumInfo += "&nbsp;";
				pageNumInfo += "<span class='pageNum' val='" + getMoreNextPageNum(maxPageNum) + "'>" + "<span class='fa fa-step-forward' style='cursor: pointer;'></span>" + "</span>";
			}
			else {
				pageNumInfo += "&nbsp;";
				pageNumInfo += "<span class='fa fa-play' style='cursor: default; opacity: .35; filter:Alpha(Opacity=35);'></span>";
				pageNumInfo += "&nbsp;";
				pageNumInfo += "<span class='fa fa-step-forward' style='cursor: default; opacity: .35; filter:Alpha(Opacity=35);'></span>";
			}

			$('#' + params.elemId + ' #page-number-info').html(pageNumInfo);
		}

		function getStartPageNum(currentPageNum, maxPageNum, pageNumShow) {
			var startPageNum = currentPageNum  + pageNumShow > maxPageNum ? maxPageNum - pageNumShow + 1 : currentPageNum;
			return startPageNum <= 0 ? 1 : startPageNum;
		}

		function getPrevPageNum() {
			return params.page <= 1 ? params.page : params.page - 1;
		}

		function getNextPageNum(maxPageNum) {
			return params.page < maxPageNum ? params.page + 1 : params.page;
		}

		function getMorePrevPageNum() {
			return options.pageNumShow > 0 ? 1 : params.page - options.pageNumShow;
		}

		function getMoreNextPageNum(maxPageNum) {
			return   maxPageNum > 0 ? maxPageNum : params.page + options.pageNumShow;
		}

		reload();
	};

	$.fn.YSChkboxDisable = function(options) {
		var textColorDisabled = '#a2a2a2', textColorEnabled = '#333';

		if (!options.checked) {
			var disabledDivId = $(this.selector).attr('disabledDivId');
			$('#' + disabledDivId + ' *').prop('disabled', true);

			$('#' + disabledDivId + ' i').prop('disabled', false);
			$('#' + disabledDivId).css('color', textColorDisabled);
			$('#' + disabledDivId + ' i').css('color', textColorDisabled);
			$('#' + disabledDivId + ' a').each(function() {
				if (!$(this).attr('execFunc')) {
					$(this).attr('execFunc', $(this).attr('onclick'));
				}
				$('#' + disabledDivId + ' a').css('color', textColorDisabled);
				$(this).removeAttr('onclick');
			});
		}

		this.click(function() {
			var chkboxDivId = $(this).attr('id'), disabledDivId = $(this).attr('disabledDivId');
			if (disabledDivId) {
				var chkboxChecked = $('#' + chkboxDivId).prop('checked');
				$('#' + disabledDivId + ' *').prop('disabled', !chkboxChecked);

				$('#' + disabledDivId + ' i').prop('disabled', false);
				$('#' + disabledDivId + ' a').each(function() {
					if (!$(this).attr('execFunc')) {
						$(this).attr('execFunc', $(this).attr('onclick'));
					}
					if (chkboxChecked) {
						$('#' + disabledDivId + ' a').css('color', textColorEnabled);
						$('#' + disabledDivId + ' i').css('color', textColorEnabled);
						$(this).attr('onclick', $(this).attr('execFunc'));
					}
					else {
						$('#' + disabledDivId + ' a').css('color', textColorDisabled);
						$('#' + disabledDivId + ' i').css('color', textColorDisabled);
						$(this).removeAttr('onclick');
					}
				});
			}

			if ($('#' + chkboxDivId).prop('checked')) {
				$('#' + disabledDivId).css('color', textColorEnabled);
			}
			else {
				$('#' + disabledDivId).css('color', textColorDisabled);
			}
		});

	};

	$.fn.YSBubblePopup = function(options) {
		var defaults = {
			position : 'left',
			msg : '',
			bubbleType: 'question',
			parentElement: null,
			isInsertInIframe : ''
		}
		var options = $.extend(defaults, options),
			width = "width: ",
			bubbleType = options.bubbleType,
			documentWidth,
			parentElement = options.parentElement;

		if (!options.msg) {
			//throw new Error('params error');
			//TODO
			return;
		}
		var msg = '';
		if (options.width) {
			width += options.width + 'px;';
			msg = options.msg;
		}
		else {
			msg = htmlEscapeWithoutBrTag(options.msg);
		}

		this.each(function(){
			var docbody, pupupHtml;

			if (options.isInsertInIframe == 'Y') {
				docbody = parentElement.contents().find('body');
				documentWidth = docbody[0].offsetWidth;
			}
			else {
				docbody = document.body
				documentWidth = $(document).find('body')[0].offsetWidth;
			}

			pupupHtml = '<div class="bubble_popup_box bubble_popup_' + bubbleType +'_box">';
			if (bubbleType != 'helpRight') {
				pupupHtml += '<div class="bubble_popup_arrow bubble_popup_'+options.position+'"></div>'
							+ '<div class="bubble_popup_arrow2 bubble_popup_'+options.position+'"></div>';
			}
			pupupHtml += '<div class="bubble_popup_info" style="' + width + '">'+ msg +'</div></div>';

	        var element = $(this),
	        	element_top = element.offset().top,
	        	element_left = element.offset().left,
	        	element_width = element.width(),
	        	bubble = $(pupupHtml).appendTo(docbody),
	        	top = element_top-bubble.outerHeight()-2,
	        	left = '';

        	if (parentElement != null) {
        		element_left += parentElement.offset().left + element_width/2;
        		element_top += parentElement.offset().top - parentElement.contents().scrollTop();
        		top += parentElement.offset().top - parentElement.contents().scrollTop();
			}

	        switch(options.position){
	            case 'center':
	            	if (options.moduleName == 'site-page') {
    	        		element_left += element_width/2;
                    }

                    left = element_left-97;
                    if (options.width) {
                    	var offLeft = options.width/2+6;
                    	left = left - offLeft + 90;
                    	if (options.moduleName == 'site-page') {
                    		left = left - 6;
                    	}
                    	if (bubbleType == 'border-unit-helper') {
                    		left = element_left - options.width/2;
                    	}
                    	bubble.find('.bubble_popup_arrow').css('left', offLeft + 'px');
                    	bubble.find('.bubble_popup_arrow2').css('left', (offLeft-4) + 'px');
                    }
	                break;
	            case 'left':
	            	if (bubbleType == 'help') {
	            		top = element_top-bubble.outerHeight() - 2;
	            		left = element_left-29;
	            	}
	            	else if (bubbleType == 'tree_help') {
	            		top = element_top-bubble.outerHeight() - 2;
	            		left = element_left-25;
	            	}
	            	else if (bubbleType == 'pseudo_helper') {
	            		left = element_left - (20 + element_width/2);
	            		bubble.find('.bubble_popup_arrow').css('left', 20);
	            		bubble.find('.bubble_popup_arrow2').css('left', 16);
	            	}
	            	else if (bubbleType == 'widget-helper') {
	            		left = element_left-5;
	            		bubble.find('.bubble_popup_arrow').css('left', 20);
	            		bubble.find('.bubble_popup_arrow2').css('left', 16);
	            	}
	            	else {
	            		left = element_left - 23;
	            	}
	                break;
	            case 'right':
	            	if (bubbleType == 'helpRight') {
	            		top = element_top - 70;
	            		left = element_left + 265;
	            	}
	            	else {
	            		if (options.width) {
	            			left = element_left - options.width;
	            			bubble.find('.bubble_popup_arrow').css('left', options.width - 8);
	            			bubble.find('.bubble_popup_arrow2').css('left', options.width - 12);
	            		}
	            		else {
	            			left = element_left - 190;
	            		}
	            	}
	                break;
	            case 'middleLeft':
                    if (options.width) {
                    	if (bubbleType == 'border-unit-helper') {
                    		left = element_left - options.width - 40;
                    		top = top + 20;
                    	}
                    	bubble.find('.bubble_popup_arrow').remove();
                    	bubble.find('.bubble_popup_arrow2').remove();
                    }
	                break;
	            default:
	        }
	        bubble.css({
            	top: top,
                left: left
            });
	        bubble.fadeIn('fast');
	        
	        if (bubbleType == 'whiteboard') {
	        	 bubble.css({
	             	top: top - 5,
	             	left: left + element.width() / 2,
	             });
	        }
	        else if (bubbleType == 'page_design') {
	        	var bubbleWidth, offLeft, left, bubbleTop, bubbleLeft;

	        	if (options.thiz.hasClass('column-offset')) {
	        		bubbleWidth = options.width;
	        		bubble.find('.bubble_popup_info').width(bubbleWidth);
	        		bubbleLeft = parentElement.offset().left + options.thiz.offset().left - (bubble.width() - options.thiz[0].offsetWidth)/2 - 7;
	        	}
	        	else {
	        		var widgetName = $.trim(bubble.find('.widget-name').text());
	        		if (widgetName.length > 50) {
	        			widgetName = widgetName.substring(0, 50) + '...';
					}
	        		bubble.find('.widget-name').text(widgetName);

	        		bubble.find('.bubble_popup_info').width(parentElement.width());
	        		bubble.find('.bubble_popup_info').width(bubble.find('.bubble_popup_info span').width() + 40);
	        		bubbleWidth = bubble.find('.bubble_popup_info span').width() + 40;
	        		bubbleLeft = parentElement.offset().left + options.thiz.offset().left - (bubble.width() - options.thiz[0].offsetWidth + parseInt(options.thiz.css('margin-left')))/2 - 7;

	        		bubbleLeft = bubbleLeft + parseInt(options.thiz.css('margin-left'))/2;
	        	}
	        	bubbleTop = parentElement.offset().top + options.thiz.offset().top - parentElement.contents().scrollTop() - bubble.height() - 20;

	        	offLeft = bubbleWidth/2+6;
            	left = left - offLeft + 90;

            	if (bubbleLeft < 12) {
            		offLeft = 30;
            		bubbleLeft = bubbleLeft + bubble.width()/2 - 35;
            	}
            	else if (bubbleLeft + bubble.width() > documentWidth) {
            		offLeft = bubble.width() - 25;
            		bubbleLeft = bubbleLeft - bubble.width()/2 + 20;
            	}

            	bubble.find('.bubble_popup_arrow').css('left', offLeft + 'px');
            	bubble.find('.bubble_popup_arrow2').css('left', (offLeft-4) + 'px');

            	bubble.css({
                	top: bubbleTop,
                    left: bubbleLeft,
                });
        	}
	        else if (bubbleType == 'page_design_error') {
	        	var bubbleWidth, offLeft, left, bubbleTop, bubbleLeft;

	        	bubbleTop = options.thiz.offset().top - bubble.height() - 20;
	        	if (bubbleTop < 0) {
	        		bubbleTop = 0
	        	}

	        	bubbleLeft = options.thiz.offset().left - 37;
	        	if (!options.hide) {
	        		bubbleLeft += options.thiz.width();
	        	}

	        	offLeft = bubbleWidth/2+6;
            	left = left - offLeft + 90;

            	if (bubble.width() + bubbleLeft < documentWidth) {
            		offLeft = 25;
            	}
            	else {
            		offLeft = bubble.width() - 25;
            		bubbleLeft = options.thiz.offset().left + options.thiz.width() - bubble.width() + 13;
            	}

            	bubble.find('.bubble_popup_arrow').css('left', offLeft + 'px');
            	bubble.find('.bubble_popup_arrow2').css('left', (offLeft-4) + 'px');
            	bubble.addClass('error');
            	bubble.attr('id', options.thiz.attr('id')+'_error_msg');

            	if (options.thiz.attr('id').indexOf('droppable-wrapper-') > -1) {
            		bubbleLeft = bubbleLeft - 20;
            	}

            	if (bubbleLeft + bubble.width() > parentElement.width()) {
            		bubbleLeft = parentElement.width() - bubble.outerWidth() - 20;
            	}

            	bubble.css({
                	top: bubbleTop,
                    left: bubbleLeft,
                });
	        }

	    });
	    return this;
    };

    $(document).on('mouseenter', '.question-bubble-popup', function() {
    	if (localStorage.helpDisplayFlag == 'Y') {
    		$(this).YSBubblePopup({ position: $(this).attr('position'), msg: $(this).attr('guidance'), width: $(this).attr('custom-width'), bubbleType: 'question' });
    	}
	}).on('mouseleave', '.question-bubble-popup', function() {
		$('.bubble_popup_box').remove();
	});

    $(document).on('mouseenter', '.help-bubble-popup', function() {
    	if (localStorage.helpDisplayFlag == 'Y') {
    		var position = $(this).attr('position'),
	    		msg = $(this).attr('guidance'),
	    		customWidth = $(this).attr('custom-width'),
	    		moduleName = $(this).attr('module-name');

    		$(this).YSBubblePopup({ position: position, msg: msg, width: customWidth, bubbleType: 'help', moduleName: moduleName, thiz: $(this) });
    	}
    }).on('mouseleave', '.help-bubble-popup', function() {
		$('.bubble_popup_box').remove();
	});

    $(document).on('mouseenter', '.bubble-popup', function() {
    	if (localStorage.helpDisplayFlag == 'Y') {
    		if (typeof bubbleContents != 'undefined') {
    			var clazz = $(this).attr('class'),
    				result = /bp-([A-Za-z0-9\-]+)/.exec(clazz),
    				position, msg, width, bpKey;

    			if (result == null) {
    				return false;
    			}
    			bpKey = result[0];

    			position = bubbleContents[bpKey]['position'];
    			msg = bubbleContents[bpKey]['msg'];
    			width = bubbleContents[bpKey]['width'];

    			$(this).YSBubblePopup({ position: position, msg: msg, width: width, bubbleType: 'question' });
    		}
    	}
	}).on('mouseleave', '.bubble-popup', function() {
		$('.bubble_popup_box').remove();
	});

    $(document).on('mouseenter', '.helpRight-bubble-popup', function() {
    	if (localStorage.helpDisplayFlag == 'Y') {
    		var position = $(this).attr('position'),
	    		msg = $(this).attr('guidance'),
	    		customWidth = $(this).attr('custom-width'),
	    		moduleName = $(this).attr('module-name');

    		$(this).YSBubblePopup({ position: position, msg: msg, width: customWidth, bubbleType: 'helpRight', moduleName: moduleName, thiz: $(this) });
    	}
    }).on('mouseleave', '.helpRight-bubble-popup', function() {
		$('.bubble_popup_box').remove();
	});

	//JQuery plugin:
    $.fn.textWidth = function(_text, _font){//get width of text with font.  usage: $("div").textWidth();
            var fakeEl = $('<span>').hide().appendTo(document.body).text(_text || this.val() || this.text()).css({font: _font || this.css('font'), whiteSpace: "pre"}),
                width = fakeEl.width();
            fakeEl.remove();
            return width;
        };

    $.fn.autoresize = function(options){//resizes elements based on content size.  usage: $('input').autoresize({padding:10,minWidth:0,maxWidth:100});
    	if($(this).hasClass("auto-resize")){
    		$(this).removeClass("auto-resize")
    	}else{
    		return;
    	}
    	$(this).addClass("auto-resize-actived");
    	
    	options = $.extend({padding:10,maxWidth:900}, options||{});
    	if(!options.minWidth){
    		if($(this).css("min-width")){
    			options.minWidth = parseInt($(this).css("min-width"));
    		}else{
    			options.minWidth = 50;
    		}
    	}
    	
    	$(this).on('input', function() {
        	if($(this).attr("placeholder") && !$(this).val().length){
        		$(this).css('width', '');
        		$(this).css('height', '');
        	}else{
        		$(this).css('width', Math.min(options.maxWidth,Math.max(options.minWidth,$(this).textWidth() + options.padding)));
        	}
        	
        	if($(this).attr("type") != "text"){
        		$(this).autoExpand();
        	}

    	}).trigger('input');;
      
    	if($(this).hasClass("is-dis-enterkey")){
    		$(this).keypress(function(event) {
    			if (event.keyCode == 13) {
    				event.preventDefault();
    			}
    		});
    		$(this).on("keyup blur",function() {
    			var txt = $(this).val();
    			if(txt.match(/[\n\r]+/)){
    				$(this).val(txt.replace(/[\n\r]+/g, " "));
    				$(this).trigger('input');
    			}
    		});
    	}
    	
		$(this).on("blur",function() {
			$(this).val($.trim($(this).val()));
			$(this).trigger('input');
		});
    	return this;
    }
    
    $.fn.YSInfiniteScroll = function(options) {
    	
    	var $self=$(this), pageNum = 1, isScroll = true, isEndPage = false;;

    	var loader = $('<div class="modern-list__loader-ellips">'
    			+'<span class="modern-list__loader-ellips__dot"></span>'
    			+'<span class="modern-list__loader-ellips__dot"></span>'
    			+'<span class="modern-list__loader-ellips__dot"></span>'
    			+'<span class="modern-list__loader-ellips__dot"></span>'
    			+'</div>');
    	
    	if($(this).closest(".modern-list-data-area").is(':visible')){
    		var thisArea = $(this);
    		$self.css( "height", "calc("+$(window).height()+"px - 185px - "+$(this).closest(".modern-list-data-area").position().top+"px)" );
    		$(window).on("resize",function(){
    			$self.css( "height", "calc("+$(window).height()+"px - 185px - "+thisArea.closest(".modern-list-data-area").position().top+"px)" );
    		});
    		
        }
    	
    	$(this).find('.modern-list__page').parent().append(loader);
    	
    	$(this).find('.modern-list__go-top_link').click(function(event) {
			event.preventDefault();
			$self.animate({scrollTop: 0}, 300);
		})
    	
    	$(this).off('scroll.YSInfiniteScroll').on('scroll.YSInfiniteScroll', function() {
			if ($(this).scrollTop() > $(this).innerHeight()) {
				$('.modern-list__go-top_link').fadeIn(200);
			} else {
				$('.modern-list__go-top_link').fadeOut(200);
			}
			
    		if ($(this)[0].scrollTop >= $(this)[0].scrollHeight - $(this).height() - options.scrollBottomPercent * $(this)[0].scrollHeight) {
    			
    			if ($(this).find('.end-page').length > 0) {
    	    		isEndPage = true;
    	    	}
    			if (!isEndPage) {
    				if (isScroll) {
    					isScroll = false;
    					pageNum = $(this).find('.modern-list__page:last').attr('data-page');
    					if (pageNum) {
    						pageNum = parseInt(pageNum);
    					}
    					pageNum++;
    					
    					var url = options.url;
    					url.lastIndexOf('/');
    					var csrfParams = url.substring(url.lastIndexOf('/') + 2);
    					url = url.substring(0, url.lastIndexOf('/') + 1) + pageNum + csrfParams;
    					
    					var formOpt = {};
    					formOpt["mco"] = 'Y';
    					formOpt["sidx"] = options.sidx || "";
    					formOpt["sord"] = options.sord || "";
    					formOpt["searchType"] = options.searchType;
    					
    					var postData = [];
    					if (options.params) {
    						let postDataArray = eval('(' +options.params + ')');
    						if (postDataArray.constructor === Array) {
    							for (var i = 0; i < postDataArray.length; i++) {
    								if(postDataArray[i].name in formOpt){
    									formOpt[postDataArray[i].name] = postDataArray[i].value;
    								}else{
    									postData.push(postDataArray[i]);
    								}
    							}
    							
    						}
    					}
    					for(var prop in formOpt){
    						postData.push({"name":prop ,"value":formOpt[prop]});
    					}
    					
    					$(this).find('.modern-list__loader-ellips').show();
     					/*
    					$(this).find('.modern-list__page:last').after('<div class="modern-list__page" data-page="'+ pageNum +'"></div>');
    					$(this).find('.modern-list__page:last').load(url, postData, function(response, status) {
    						if (status == 'success') {
    							$('.modern-list__loader-ellips').hide();
    							if (options.callBackFunc) {
    								if (typeof options.callBackFunc == 'string' && typeof window[options.callBackFunc] == 'function') {
    									window[options.callBackFunc]();
    								}
    							}
    							isScroll = true;
    						} 
    						else if (status == 'error') {
    	    					$(this).find('.modern-list__page:last').remove();
    							return;
    						}
    					});
    					*/
    					var $lastPage = $self.find('.modern-list__page:last'),
    						$lastPageList = $lastPage.find('ul.ui-list-view');
    					
       					$.ajax({
    			            url: url,
    			            type:'POST',
    			            dataType: 'html',
    			            data : postData
    			        }).done(function(data) {
    			        	
    			        	if (data == '') {
    			        		return;
    			        	}
    			        	
    			        	$('.modern-list__loader-ellips').hide();
    			        	var newList = $('ul.ui-list-view', data);
    			        	if(newList.length > 0){
    			        		$lastPageList.append(newList.html());
    			        		$lastPage.attr("data-page",pageNum);
    			        	}else{
    			        		$lastPage.after('<div class="modern-list__page" data-page="'+ pageNum +'">'+data+'</div>');
    			        		//$lastPage.html(data);
    			        	}
    			        	
    			        	if (options.callBackFunc) {
								if (typeof options.callBackFunc == 'string' && typeof window[options.callBackFunc] == 'function') {
									window[options.callBackFunc]();
								}
							}
							isScroll = true;
    			        }).fail(function(XMLHttpRequest, textStatus, errorThrown) {
    			        	//$('.modern-list__loader-ellips').hide();
    			        })

    				}
    			}
    		}
    	});
    };
    
	$.fn.YSModalDialog = function(options) {
		var self = this;
		var href = $(this).attr('href');
		
		if(typeof options === 'string' && options == "close"){
			$(this).iziModal('close');
			return true;
		}
		
		var dialogId;
		if (typeof options != 'undefined' && typeof options.dialogId != 'undefined') {
			dialogId = options.dialogId;
		}
		else if(href && href.charAt(0) == '#'){
			dialogId = "-" + $(this).attr('id');
		}
		else{
			dialogId = "";
		}
		
		var ysModalDialogOpt = {
			radius: 10,
			position: 'center',
			width: options && options.width || "540px",
			height:  options && options.height || "auto",
			resize: 'auto',
			zindex: 101,
			resizable: false,
			closeOnEscape: false,
			modal: true,
			overlayColor: "rgba(0, 0, 0, 0.25)",
			overlayClose: false,
		    onOpening: function(modal){
		    	setModalOverlayColor();
				modal.startLoading();
				addModalCloseButton(modal);
          		//	.append('<button data-izimodal-close="" class="icon-close fa fa-times"></button>');
		    },
		    onOpened: function(modal) {
		    	setModalOverlayColor();
		    	top.$('body > [id="loading-div'+dialogId+'"]').remove();
		    	
				$('.formError').remove(); // Clear validation error message
				$(this).parent().focus();
				
				$(this).dialog = function(msg){
					if(msg == "close"){
						$(this).iziModal('close');
					}else{
						console.log("error parameter");
					}
				}
			},
			onClosed: function(modal) {
		    	setModalOverlayColor();
				top.$('body > [id="loading-div'+dialogId+'"]').remove();
				
				if (typeof options === 'object' && typeof window[options.afterClose] === 'function') {
					window[options.afterClose]();
				}
				
				var href = self.attr('href');
				if (href && href.charAt(0) != '#') {
					if (top.$('#YSDialog'+dialogId + " .iziModal-content").length > 0) {
						top.$('#YSDialog'+dialogId + " .iziModal-content").html("");
					}
				}
			}
		},
		ysModalDialogIframeOpt = {
				radius: 10,
				autoOpen: false,
				position: 'center',
				width: options && options.width || "540px",
				height:  options && options.height || "auto",
				zindex: 101,
				resizable: false,
				closeOnEscape: false,
				modal: true,
				overlayColor: "rgba(0, 0, 0, 0.25)",
				overlayClose: false,
			    onOpening: function(modal){
			    	setModalOverlayColor();
					modal.startLoading();
					addModalCloseButton(modal);
	          		//	.append('<button data-izimodal-close="" class="icon-close fa fa-times"></button>');
					return true;
			    },
			    onOpened: function(modal) {
			    	setModalOverlayColor();
			    	top.$('body > [id="loading-div'+dialogId+'"]').remove();
			    	
					$(this).dialog = function(msg){
						if(msg == "close"){
							$(this).iziModal('close');
						}else{
							console.log("error parameter");
						}
					}
				},
				onClosed: function(modal) {
			    	setModalOverlayColor();
					top.$('body > [id="loading-div'+dialogId+'"]').remove();
					
					if (typeof options === 'object' && typeof window[options.afterClose] === 'function') {
						window[options.afterClose]();
					}
				}
			}, optionObj={};
			
		if (typeof options === 'object') {
			optionObj = options;
		}
		
		top.$('body > [id="loading-div'+dialogId+'"]').remove();
		top.$('body').append(`<div id="loading-div${dialogId}" style="display: none; position:absolute; z-index: ${getNextModalZindex()}; top:0; left: 0; width: 100%; height: 100%;"></div>`);
		
		if (optionObj.iframe) {
			if (top.$('#YSDialogIframe'+dialogId).length > 0) {
				top.$('#YSDialogIframe'+dialogId).remove();
			}
			top.$('body').append('<div id="YSDialogIframe'+dialogId+'" style="overflow:hidden;display:none; padding: 0px;z-index:999999;">' +
					'<iframe id="ysIframe'+dialogId+'" name="ysIframe'+dialogId+'" width="100%" height="100%" marginWidth="0" marginHeight="0" frameBorder="0" scrolling="no"/></div>');
			
		}
		else{
		
			if (href && href.charAt(0) == '#' && top.$('[id='+ href.slice(1) +']').length == 1){
				$(href).appendTo(top.$('body'));
			}
			
			if (top.$('#YSDialog'+dialogId).length > 0) {
				top.$('#YSDialog'+dialogId).remove();
			}

			top.$('body').append('<div id="YSDialog'+dialogId+'" style="overflow:hidden;display:none; z-index:999999;"></div>');
		}
		

		if (optionObj.dialogData) {
			top.$('#YSDialog'+dialogId).empty().html(optionObj.dialogData);
			top.$('#YSDialog'+dialogId).iziModal(ysModalDialogOpt);
			top.$('#YSDialog'+dialogId).iziModal('open');
			setTimeout(function() {
				top.$('#YSDialog'+dialogId).css('min-height', 'inherit');
			}, 10);
		}
		else {
			this.unbind('click');
			this.click(function() {
				var href = $(this).attr('href');
				var max_zindex = getNextModalZindex();
				
				//$('#loading-div'+dialogId).height($(document).height());
				top.$('#loading-div'+dialogId).show();
				
				setTimeout(function(){
					if(top.$('#loading-div'+dialogId).is(':visible')){
						top.$('#loading-div'+dialogId).hide();
					}
				},60000);
				
				if (optionObj.iframe) {
					
					top.$('#YSDialogIframe'+dialogId).iziModal(ysModalDialogIframeOpt);
					
					if (optionObj.postDataFormId) {
						$('#' + optionObj.postDataFormId).attr('target', 'ysIframe'+dialogId);
						if($('#' + optionObj.postDataFormId).attr('action') == null 
								|| $('#' + optionObj.postDataFormId).attr('action').length == 0){
							$('#' + optionObj.postDataFormId).attr('action', href);
						}
						$('#' + optionObj.postDataFormId).submit();
					}
					else {
						top.$('#ysIframe'+dialogId).attr('src', href);
					}
					
					top.$('#YSDialogIframe'+dialogId).iziModal('setZindex', max_zindex);
					top.$('#YSDialogIframe'+dialogId).iziModal('open');
					
					top.$('#ysIframe'+dialogId).one('load', function() {
						let YSModalDialogIframe = top.$('#YSDialogIframe'+dialogId),
							ysIframe = top.$("#ysIframe"+dialogId);
						
						ysIframe.contents().find("body").css("margin", "0px");
						ysIframe.contents().find(".btn:last").addClass("btn-no-border");
						if(!ysIframe.contents().find(".ysdialog-contents").hasClass("no-title")){
							ysIframe.contents().find(".ctrl-area > .font-sub-title").remove();
							ysIframe.contents().find(".ctrl-area").prepend(`<div class="font-sub-title"><span class="font-lead">${options.dialogTitle || ''}</span></div>`);
						}
						if(optionObj.width && optionObj.height){
							ysIframe.width(optionObj.width);
							ysIframe.height(optionObj.height);
							ysIframe.contents().find(".ysdialog-contents").css("max-height", parseInt(optionObj.height) - parseInt(ysIframe.contents().find(".ysdialog-contents").css("margin-top")))
						}else{
							resizeYSModalDialogIframe($(this), dialogId);
							//$('#ysIframe'+dialogId).contents().find("body").on('DOMNodeInserted DOMSubtreeModified',function(e) {
								resizeYSModalDialogIframe(ysIframe, dialogId);
							//});
							setTimeout(function(){
								YSModalDialogIframe.height(ysIframe.height());
							}, 100);
													}
						{
							top.$('#YSDialogIframe'+dialogId).iziModal('stopLoading')
							if (typeof optionObj === 'object' && typeof window[optionObj.afterOpen] === 'function') {
								window[optionObj.afterOpen]();
							}
							ysIframe.contents().find("body").YSFormInit();
						}

					});
				}
				else {
					
					if (href && href.charAt(0) == '#') {
						var ysModalDialogChild = top.$('#YSDialog'+dialogId).find(".iziModal-content:first").children(".ysdialog");
						
						if (ysModalDialogChild.length > 0) {
							top.$('#YSDialog'+dialogId).iziModal('setZindex', max_zindex);
							top.$('#YSDialog'+dialogId).iziModal("open");
							$(href).css('display', 'block');
							top.$('#YSDialog'+dialogId).iziModal('stopLoading');
							top.$('#YSDialog'+dialogId).YSFormInit();
							return false;
						}
						
						$(href).css('display', 'block');
						//$(href).appendTo($('#YSDialog'+dialogId));
						top.$('#YSDialog'+dialogId).iziModal(ysModalDialogOpt);
						top.$('#YSDialog'+dialogId).iziModal('setZindex', max_zindex);
						top.$('#YSDialog'+dialogId).iziModal("open");
						$(href).appendTo(top.$('#YSDialog'+dialogId + " .iziModal-content"));
						if(!top.$("#YSDialog"+dialogId).find(".ysdialog-contents").hasClass("no-title")){
							top.$("#YSDialog"+dialogId).find(".ctrl-area > .font-sub-title").remove();
							top.$("#YSDialog"+dialogId).find(".ctrl-area").prepend(`<div class="font-sub-title"><span class="font-lead">${options.dialogTitle || ''}</span></div>`);
						}
						//for the compatibility with jquery 1.12.1
						if ($.fn.jquery > "1.10") {
//							$('#YSDialog'+dialogId).dialog('widget').position({my:"center", at:"center", of: window});
						}
						
						top.$("#YSDialog"+dialogId).find(".btn:last").addClass("btn-no-border");
						if(!optionObj.width && top.$("#YSDialog"+dialogId).find('.ysdialog-contents').length){
							top.$("#YSDialog"+dialogId).find('.ysdialog-contents').removeClass("is-hidden").show();
							var dialogW = parseInt($("#YSDialog"+dialogId).find('.ysdialog-contents').width() || 400) + 80;
							top.$("#YSDialog"+dialogId).css("max-width",dialogW);
							top.$("#YSDialog"+dialogId).css("width",dialogW);
						}
						
						{
							top.$('#YSDialog'+dialogId).iziModal('stopLoading');
							if (typeof optionObj === 'object' && typeof window[optionObj.afterOpen] === 'function') {
								window[optionObj.afterOpen]();
							}
							
							top.$('#YSDialog'+dialogId).YSFormInit()
						}

					}
					else {
						top.$('#YSDialog'+dialogId).iziModal(ysModalDialogOpt).iziModal('setZindex', max_zindex);
						top.$('#YSDialog'+dialogId).iziModal(ysModalDialogOpt).iziModal("open");

						var params = "";
						if (optionObj.postDataFormId) {
							
							if(href.indexOf("?")>-1){
								params = "&";
							}else{
								params = "?";
							}
							params = params + $('#' + optionObj.postDataFormId).serialize() || "";
						}
						
						top.$('#YSDialog'+dialogId + " .iziModal-content").load(href + params, optionObj, function() {
							
							top.$("#YSDialog"+dialogId).find(".btn:last").addClass("btn-no-border")
							if(!top.$("#YSDialog"+dialogId).find(".ysdialog-contents").hasClass("no-title")){
								top.$("#YSDialog"+dialogId).find(".ctrl-area > .font-sub-title").remove();
								top.$("#YSDialog"+dialogId).find(".ctrl-area").prepend(`<div class="font-sub-title"><span class="font-lead">${options.dialogTitle || ''}</span></div>`);
							}
							
							if (optionObj.validationFormId) {
								$("#" + optionObj.validationFormId).validationEngine();
							}
							
							if(!optionObj.width && top.$("#YSDialog"+dialogId).find('.ysdialog-contents').length){
								top.$("#YSDialog"+dialogId).find('.ysdialog-contents').removeClass("is-hidden").show();
								var dialogW = parseInt($("#YSDialog"+dialogId).find('.ysdialog-contents').width() || 400) + 80;
								top.$("#YSDialog"+dialogId).css("max-width",dialogW);
								top.$("#YSDialog"+dialogId).css("width",dialogW);
							}
							{
								top.$('#YSDialog'+dialogId).iziModal('stopLoading')
								if (typeof optionObj === 'object' && typeof window[optionObj.afterOpen] === 'function') {
									window[optionObj.afterOpen]();
								}
								
								top.$('#YSDialog'+dialogId).YSFormInit()
							}
							//$('#YSDialog'+dialogId + " .iziModal-content").css("visibility","");							
							
						});

					}
				}
				return false;
			});
		}
		
		function resizeYSModalDialogIframe(obj, dialogId) {
			obj.width(0);
			obj.height(0);
			
			var ow = obj.contents().width(),
				oh = obj.contents().height();
			
			if(ow >= $(window).width() * 0.75){
				ow = "75vw";
			}
			
			obj.width(ow);
			obj.height(oh);
			
			$('#YSDialogIframe'+dialogId).css("width", ow);
			$('#YSDialogIframe'+dialogId).css("max-width", ow);
			$('#YSDialogIframe'+dialogId).css("height", oh);
			var marginTop = parseInt($('#YSDialogIframe'+dialogId).contents().find(".ysdialog-contents").css("margin-top"))
			$('#YSDialogIframe'+dialogId).contents().find(".ysdialog-contents").css("max-height", oh - marginTop);
		}
	};
    
	$.fn.YSFormInit = function(options) {
		var forDiv = this;// $(formDivId || "#YSContainer");
		
		if(!forDiv.hasClass("YSFormInit")){
			forDiv.addClass("YSFormInit");
			forDiv.on('YSFormInit DOMNodeInserted DOMSubtreeModified',function(e) {
				
				if($(e.target).is('input[type="text"][class*=txt-separator]')
						&& !$(e.target).hasClass("txt-separator-actived")){
					
					$(e.target).addClass("txt-separator-actived");
					var self = $(e.target),
						selfId = self.attr("id") || self.attr("mame"),
						setting = self.attr("class").match(/txt-separator\[(.*)\]/),
						maxNum = 1,
						maxLength = 9,
						splitStr = ",";
					
					if(setting && setting.length > 1){
						setting = setting[1];
						if(setting.match(/max\[([^\]]+)\]/)){
							maxNum = setting.match(/max\[([^\]]+)\]/)[1];
						}
						if(setting.match(/split\[([^\]]+)\]/)){
							splitStr = setting.match(/split\[([^\]]+)\]/)[1];
						}
						if(setting.match(/maxLength\[([^\]]+)\]/)){
							maxLength = setting.match(/maxLength\[([^\]]+)\]/)[1];
						}
						self.addClass("is-hidden");
						
						var addInputs = [];
						var selfVals = (self.val() || "").split(",");
						for(var i=0 ; i<maxNum; i++){
							var inputVal = "", isHiddenClass = "";
							if (selfVals && selfVals.length >= i) {
								inputVal = selfVals[i] || "";
							}else{
								isHiddenClass = "is-hidden";
							}
							if(i >0){
								addInputs.push(`<span class="${isHiddenClass}">,</span>`);
							}
							addInputs.push(`<input type="text" class="for-input-${selfId} number-s auto-resize ${isHiddenClass}" maxlength="${maxLength}" value="${inputVal}"/>`);
						}
						self.after(addInputs.join(""));
						
						self.change(function(){
							var selfVals = (self.val() || "").split(",");
							self.nextAll(`.for-input-${selfId}`).each(function(i){
								var inputVal = "";
								if(i == 0){
									inputVal=selfVals[i] || "";
								}else if (selfVals && selfVals.length >= i){
									inputVal=selfVals[i];
									if(selfVals.length == 1 && selfVals[0]==""){
										$(this).prev("span").addClass("is-hidden");
										$(this).addClass("is-hidden");
									}else{
										$(this).prev("span").removeClass("is-hidden");
										$(this).removeClass("is-hidden");
									}
								}else{
									$(this).prev("span").addClass("is-hidden");
									$(this).addClass("is-hidden");
								}
								$(this).val(inputVal).autoresize();
							});
							return true;
						});
						self.nextAll(`.for-input-${selfId}`).each(function(i){
							$(this).change(function(){
								var inputsVal = [];
								self.nextAll(`.for-input-${selfId}`).each(function(){
									if($(this).val() && parseInt($(this).val())>=0){
										inputsVal.push(parseInt($(this).val()));
									}
								})
								self.val(inputsVal.sort(function (a, b) {  return a - b;  }).toString()).change();
							});
							
							$(this).keydown(function(e){
								if(e.keyCode && e.keyCode != 9 && e.keyCode != 16 && e.keyCode != 46){
									if($(this).next(`span`).hasClass("is-hidden")){
										$(this).next(`span`).removeClass("is-hidden").next(`.for-input-${selfId}`).removeClass("is-hidden").autoresize();
									}
								}
								return true;
							});
						});
					}
				}
				
				if($(e.target).is('input[type="text"], textarea')){
					$(e.target).attr('autocomplete','off');
				}
				
				if($(e.target).is('.auto-resize')){
					$(e.target).autoresize();
				}
				
				if($(e.target).children('.jzSelectWrap').length > 0){
					$(e.target).children('.jzSelectWrap').each(function(){
						var $self = $(this), $select = $self.children("select");
						$self.children('.viewport').remove();
						$self.prepend('<span class="viewport"></span>');
						$self.children('.viewport').text($select.children('option:selected').text());
						$select.change(function () {
						    $(this).prev('.viewport').text($("option:selected", this).text());
						});
					})
				}
				
				if($(e.target).is('.select-button-text-input-div')){
					var selectButtonTextInputDiv = $(e.target),
						buttonDiv = selectButtonTextInputDiv.find('.select-button-input'),
						inputDiv = selectButtonTextInputDiv.find('.select-text-input');
					
					if(buttonDiv.find('input[type="radio"]').prop('checked')){
						buttonDiv.css("display","inline");
					}else{
						inputDiv.css("display","inline");;
					}
					selectButtonTextInputDiv.find('input[type="radio"]+label').off("change").off("click");
					
					buttonDiv.find('input[type="radio"]').keydown(function(e){
						if(e.keyCode && e.keyCode != 9 && e.keyCode != 16){
							buttonDiv.find('input[type="radio"]+label').click();
						}
						return true;
					});
					buttonDiv.find('input[type="radio"]+label').click(function(){
						inputDiv.find('input[type="radio"]').attr("checked",true).change();
						return false;
					});
					
					inputDiv.find('input[type="text"]').on("change blur", function(){
						if(!$(this).val() || !$(this).val().trim()){
							buttonDiv.find('input[type="radio"]').attr("checked",true).change();
						}
					});
					
					selectButtonTextInputDiv.find('input[type="radio"]').on("change", function(){
						if(inputDiv.find('input[type="radio"]').is(':checked')){
							inputDiv.css("display","inline");
							inputDiv.find('input[type="text"]').val('').removeAttr("disabled").focus();
							
							buttonDiv.hide();
							
						}else if(buttonDiv.find('input[type="radio"]').is(':checked')){
							buttonDiv.css("display","inline");
							inputDiv.find('input[type="text"]').attr("disabled",true)
							inputDiv.hide();
	
						}
						return true;
					});
					
				}
				
			});
		}
		forDiv.find('input[type="text"], textarea, .auto-resize, .jzSelectWrap, .select-button-text-input-div').trigger("YSFormInit");
		
		forDiv.find("[id$='wrap'], [class$='wrap']").each(function(){
			if (!$(this).hasClass("ysForm")){
				$(this).addClass("ysForm")
				.on("scroll", function(){
			    	if ($(this).scrollTop() > parseInt($(this).css('padding-top'))){
			    		$(this).find('.ctrl-area .font-sub-title').fadeOut(200);
					} else {
						$(this).find('.ctrl-area .font-sub-title').fadeIn(200);
					}
			    });
			}
		});

		if($(".system-area-header").height){
			var $wrap = $(".system-area-header").closest('#right-panel-wrap,.iziModal-wrap');
			$wrap.scroll(function(){
				$(".system-area-header").css("top", $wrap.scrollTop() + "px");
			});
		}
		
	}

})(jQuery);


function fly($thiz ,$dist, fn, options) {
	var defaults = {
		position : 'middleLeft',
		msg : '',
		bubbleType: 'question',
		parentElement: null,
		isInsertInIframe : ''
	}
	var options = $.extend(defaults, options),
		width = "width: 20px",
		bubbleType = options.bubbleType,
		documentWidth,
		parentElement = options.parentElement;

	if (!options.msg) {
		throw new Error('params error');
	}

	//this.each(function(){
		var docbody;

		if (options.isInsertInIframe == 'Y') {
			docbody = parentElement.contents().find('body');
			documentWidth = docbody[0].offsetWidth;
		}
		else {
			docbody = document.body
			documentWidth = $(document).find('body')[0].offsetWidth;
		}
		/*
		pupupHtml = '<div class="fab-move">'
			+ '<i>'
			+ '<svg xmlns="http://www.w3.org/2000/svg" color="white" width="30" height="30" viewBox="0 0 24 24"><path d="M22 8.51v1.372h-2.538c.02-.223.038-.448.038-.681 0-.237-.017-.464-.035-.69h2.535zm-10.648-6.553v-1.957h1.371v1.964c-.242-.022-.484-.035-.726-.035-.215 0-.43.01-.645.028zm5.521 1.544l1.57-1.743 1.019.918-1.603 1.777c-.25-.297-.593-.672-.986-.952zm-10.738.952l-1.603-1.777 1.019-.918 1.57 1.743c-.392.28-.736.655-.986.952zm-1.597 5.429h-2.538v-1.372h2.535c-.018.226-.035.454-.035.691 0 .233.018.458.038.681zm9.462 9.118h-4c-.276 0-.5.224-.5.5s.224.5.5.5h4c.276 0 .5-.224.5-.5s-.224-.5-.5-.5zm0 2h-4c-.276 0-.5.224-.5.5s.224.5.5.5h4c.276 0 .5-.224.5-.5s-.224-.5-.5-.5zm.25 2h-4.5l1.188.782c.154.138.38.218.615.218h.895c.234 0 .461-.08.615-.218l1.187-.782zm3.75-13.799c0 3.569-3.214 5.983-3.214 8.799h-1.989c-.003-1.858.87-3.389 1.721-4.867.761-1.325 1.482-2.577 1.482-3.932 0-2.592-2.075-3.772-4.003-3.772-1.925 0-3.997 1.18-3.997 3.772 0 1.355.721 2.607 1.482 3.932.851 1.478 1.725 3.009 1.72 4.867h-1.988c0-2.816-3.214-5.23-3.214-8.799 0-3.723 2.998-5.772 5.997-5.772 3.001 0 6.003 2.051 6.003 5.772z"></path></svg>'
			+ '</i></div>';
		*/
        var element = $dist,
        	element_top = element.offset().top,
        	element_left = element.offset().left,
        	element_width = element.width(),
        	bubble = ($thiz.clone()).attr("id",null).css({position:"absolute","z-index":"999999999"}).offset(getAbsolutePosition($thiz,parentElement)).appendTo(docbody),
        	//$(pupupHtml).appendTo(docbody),
        	top = element_top-bubble.outerHeight()-2,
        	left = '';

    	if (parentElement != null) {
    		element_left += parentElement.offset().left + element_width/2;
    		element_top += parentElement.offset().top - parentElement.contents().scrollTop();
    		top += parentElement.offset().top - parentElement.contents().scrollTop();
		}

        switch(options.position){
            case 'center':

                left = element_left-97;
                if (options.width) {
                	var offLeft = options.width/2+6;
                	left = left - offLeft + 90;
                 	if (bubbleType == 'border-unit-helper') {
                		left = element_left - options.width/2;
                	}
                	bubble.find('.bubble_popup_arrow').css('left', offLeft + 'px');
                	bubble.find('.bubble_popup_arrow2').css('left', (offLeft-4) + 'px');
                }
                break;
            case 'left':
            	if (bubbleType == 'help') {
            		top = element_top-bubble.outerHeight() - 2;
            		left = element_left-29;
            	}
            	else if (bubbleType == 'tree_help') {
            		top = element_top-bubble.outerHeight() - 2;
            		left = element_left-25;
            	}
            	else if (bubbleType == 'pseudo_helper') {
            		left = element_left - (20 + element_width/2);
            	}
            	else {
            		left = element_left - 23;
            	}
                break;
            case 'right':
            	if (bubbleType == 'helpRight') {
            		top = element_top - 70;
            		left = element_left + 265;
            	}
            	else {
            		if (options.width) {
            			left = element_left - options.width;
            		}
            		else {
            			left = element_left - 190;
            		}
            	}
                break;
            case 'middleLeft':
                if (options.width) {
                	if (bubbleType == 'border-unit-helper') {
                		left = element_left - options.width;
                		top = top + 20;
                	}
                }
                break;
            default:
        }

        if(top <= 0 || left <= 0){
        	bubble.hide();
        	return bubble;
        }

        bubble.animate({
        	top: top,
            left: element_left - 15
        }, {
            duration: 1000,
            queue: true,
            complete: function(){
	        	setTimeout(function(){
	        	if(fn){
	        		fn();
	        	}
	        	bubble.remove();
	        	},1001);
	        }
        });

    //});
    return bubble;
}

function getAbsolutePosition(element, parentElement){
	var element_top = element.offset().top,
	element_left = element.offset().left,
	element_width = element.width();

	if (parentElement != null) {
		element_left += parentElement.offset().left;
		element_top += parentElement.offset().top - parentElement.contents().scrollTop();
	}

	return {left: element_left , top: element_top};
}

function resizeYSDialogIframe(obj, dialogId) {
	obj.width(0);
	obj.height(0);
	obj.width(obj.contents().width());
	obj.height(obj.contents().height());
	$('#YSDialogIframe'+dialogId, top.document).dialog('option', 'position', 'center');
}

function jzMsgBoxWithoutConfirm(message, messageType) {
	if (document.getElementById('jzMsgBox')) {
		$('#jzMsgBox').empty();
	}
	else {
		$('body').append('<div id="jzMsgBox" style="position: fixed; display: none; width: auto !important;'
				+ 'border: 1px solid #999; padding: 34px 12px 30px 56px; border-radius:10px; -moz-border-radius: 10px; -webkit-border-radius: 10px; font-size: 14px; '
				+ 'color:#000; font-weight: normal; min-height: 25px; min-width: 100px; z-index: 999999999; box-shadow: 3px 3px 3px #999;'
				+ '-moz-box-shadow: 3px 3px 3px #999; -webkit-box-shadow: 3px 3px 3px #999;"></div>');
	}

	$('#jzMsgBox').html(message);
	$('#jzMsgBox').css("top", (($(window).height() - $('#jzMsgBox').outerHeight()) / 2) + "px");
	$('#jzMsgBox').css("left", (($(window).width() - $('#jzMsgBox').outerWidth()) / 2) + "px");
	$('#jzMsgBox').show();
	if (messageType == 'alert') {
		$('#jzMsgBox').css("background", "white url(" + getImageURL("alert_msg.png") + ") no-repeat 10px center");
		setTimeout("$('#jzMsgBox').hide();", 3000);
	}
	else {
		$('#jzMsgBox').css("background", "white url(" + getImageURL("info_msg.png") + ") no-repeat 10px center");
		setTimeout("$('#jzMsgBox').hide();", 1000);
	}
}


function modalMsg(message, messageType) {
	var modalOption = {
			transitionIn: 'fadeInUp',
		  width: 400, //横幅
		  timeout: 5000, //10秒で非表示
		  pauseOnHover: false,　//マウスオーバーでカウントダウン停止
		  timeoutProgressbar: false, //プログレスバーの表示
		  attached: 'bottom' //アラートの表示位置 top or bottom or　指定なしで中央
		   };
	parent.$('body').append('<div id="jzMsgBox">');
	if(messageType == 'alert'){
		openAlert('#jzMsgBox', message, '', true, modalOption);
	}else{
		openAlert('#jzMsgBox', message, '', false, modalOption);
	}
}

function jzMsgBox(message, messageType) {
	if (!parent.document.getElementById('jzMsgBox')) {
		parent.$('body').append('<div id="jzMsgBox"><a id="show-success-message-box" href="#success-message-box" style="display: none;"></a>' +
				   ' <div id="success-message-box" class="ysdialog">' +
					'<div class="ysdialog-contents jzc-msg-box-content">' +
					//'<button class="icon-close ysdialog-close fa fa-times"></button>'+
					    '<ul class="jz-msg-area">' +
					    	'<li class="">' +
					    		'<div class="icon-success"><i class="fa fa-check-circle"></i></div>' +
					    		'<div class="success-msg"></div>'+
					    	'</li>' +
					   ' </ul>' +
				    '</div>' +
				'</div>' +
				'<a id="show-error-message" href="#error-message-box" style="display: none;"></a>' +
					'<div id="error-message-box" class="ysdialog">' +
					    '<div class="ysdialog-contents jzc-msg-box-content">' +
					    	//'<button class="icon-close ysdialog-close fa fa-times"></button>'+
					    	'<ul class="jz-msg-area">' +
						    	'<li class="">' +
						    		'<div class="icon-error"><i class="fa fa-exclamation-triangle"></i></div>' +
						    		'<div class="error-msg"></div>' +
						    	'</li>' +
						    '</ul>' +
					    '</div>' +
					'</div></div>');
	}

	if (messageType == 'alert') {
		parent.$('.error-msg').html(message);
		showErrorMsgBox( Math.min(820, Math.max(300, message.length * 15 + 100)));
	}
	else {
		parent.$('.success-msg').html(message);
		showSuccessMsgBox( Math.min(820, Math.max(300, message.length * 15 + 100)));
	}
	//parent.$('#YSDialogjzMsgBox').css('min-height', '120px');
	treeHelpBubbleClose();
}

function showSuccessMsgBox(width = 500) {
	parent.$("#show-success-message-box").YSModalDialog({dialogId:"jzMsgBox", width: width, afterOpen: "afterOpenMsgBox", afterClose: "afterCloseMsgBox"});
	parent.$("#show-success-message-box").click();
}

function showErrorMsgBox(width = 500) {
	parent.$("#show-error-message").YSModalDialog({dialogId:"jzMsgBox", width: width, afterOpen: "afterOpenMsgBox", afterClose: "afterCloseMsgBox"});
	parent.$("#show-error-message").click();
}

function afterOpenMsgBox() {
	jzMsgBoxOpenFlag = true;
	$('#YSDialogjzMsgBox').find('.ui-dialog-titlebar').hide();
	$('#YSDialogjzMsgBox').find('.icon-close').hide();
	$('#YSDialogjzMsgBox').next('.iziModal-overlay').click(function(){$('#YSDialogjzMsgBox').closeDialog()});
}

function afterCloseMsgBox() {
	jzMsgBoxOpenFlag = false;
}

function jzMsgBoxTreeNode(message) {
	if (!document.getElementById('jzMsgBoxTreeNode')) {
		$('body').append('<div id="jzMsgBoxTreeNode"><a id="show-error-message-tree-node" href="#error-message-box-tree-node" style="display: none;"></a>' +
					'<div id="error-message-box-tree-node" class="tx-center ysdialog">' +
					    '<div class="ysdialog-contents jzc-msg-box-content">' +
					 	    '<table style="border: 0px;">' +
						    	'<td class="error-msg-icon-td" valign="top">' +
						    		'<div class="msg-icon"><i class="fa fa-exclamation-triangle error-msg-icon"></i></div>' +
						    	'</td>' +
						    	'<td style="padding-left: 16px; text-align: left;">' +
						    		'<div class="error-msg-tree-node"></div>' +
						    	'</td>' +
						    '</table>' +
					    '</div>' +
					'</div></div>');
	}
	$('.error-msg-tree-node').html(message);
	$("#show-error-message-tree-node").YSDialog({dialogId:"jzMsgBoxTreeNode", afterOpen: "afterOpenMsgBoxTreeNode", afterClose:"afterCloseJzMsgBoxTreeNode"});
	$("#show-error-message-tree-node").click();
	$('#YSDialogjzMsgBoxTreeNode').css('min-height', '120px');
}

function afterOpenMsgBoxTreeNode() {
	jzMsgBoxOpenFlag = true;
	$('#YSDialogjzMsgBoxTreeNode').parent().find('.ui-dialog-titlebar').hide();
}

function afterCloseJzMsgBoxTreeNode() {
	jzMsgBoxOpenFlag = false;
	$(".jstree-rename-input").focus();
}

function getImageURL(loadingFileName) {
	var contextPath = '';
	if (window.location.pathname.indexOf('/jimzen') == 0) {
		contextPath = '/jimzen';
	}

	var resourceServerUrl = '';
	if (typeof jzAppVars == 'function') {
		resourceServerUrl = top.jzAppVars().resourceServerUrl;
	}
	else if (typeof top.jzAppVars == 'function') {
		resourceServerUrl = top.jzAppVars().resourceServerUrl;
	}

	return resourceServerUrl + '/js/common/yscommonui/images/' + loadingFileName;
}

function getYsContainerWidth() {
	//return $('#panel').outerWidth() - $('#left-panel').outerWidth() - 30;
	//return $('#right-panel').width() - 6;
	return "100%";
}

function getJqGridWidth() {
	var jqGridWidth = getYsContainerWidth() - 2;
	if (jqGridWidth < 0) {
		jqGridWidth = $('#panel').width() - 2;
	}
	return jqGridWidth;
}

function getYsPanelWidth() {
	return $('#panel').width();
}

function getYsContainerHeight() {
	var lp = $('#left-panel').height(), sl = $('#yscontainer_contents').height();
	return lp > sl ? lp : sl;
}

function getYsContainerMargin() {
	var windowWidth=$(window).width(), marginWidth = 0;
	if (windowWidth > 1900) {
		marginWidth = 0.05 * windowWidth;
	}
	else if(windowWidth > 1400 && windowWidth <= 1900) {
		marginWidth = 0.06 * windowWidth;
	}
	else if(windowWidth > 1200 && windowWidth <= 1400) {
		marginWidth = 0.07 * windowWidth;
	}
	else if(windowWidth > 1000 && windowWidth <= 1200) {
		marginWidth = 0.08 * windowWidth;
	}
	return marginWidth;
}

function resizeYsContainer() {
	if ($('#navi').length > 0 && $('#YSContainer').position().left + $('#yscontainer-close-icon').position().left > $('#navi').position().left + $('#navi').width()) {
		$('#yscontainer-wrap').width(getYsContainerWidth() - 20);
		$(window).trigger('resize');
	}
}

function removeMtag(msg) {
	return msg.replace(/<m>|<\/m>/g, '');
}

function addBreadcrumbList() {
	var contents = "";
	if ($('.jstree .jstree-clicked').parent("li").attr('rel') == 'drive') {
			var elementName = $('.jstree .jstree-clicked').children("span").html().trim(),
			liId='#'+$('.jstree .jstree-clicked').parent("li").attr('id').trim();
			contents = '<a href="javascript:" onclick="$(\''+liId+'\').find(\'a:first\').click();"><span>' + elementName + '</span></a><i class="fa fa-angle-right"></i>' + contents;
	}
	else {
		$('.jstree .jstree-clicked').parent("li").parents('li').each(function() {
			var elementName = $(this).find('a:first').children("span").html().trim(), liId='#'+$(this).attr('id').trim();

			contents = '<a href="javascript:" onclick="$(\''+liId+'\').find(\'a:first\').click();"><span>' + elementName + '</span></a><i class="fa fa-angle-right"></i>' + contents;
		});
	}

	if (contents) {
		$("#breadcrumb-list").html(contents);
	}
	else {
		$("#breadcrumb-list").hide();
	}
}

$(document).on('change', 'input[type="text"]', function() {
	var thisVal = $.trim($(this).val());
	$(this).val(thisVal);
});

function isSelfIframe() {
    try {
        return window.self !== window.top;
    } catch (e) {
        return true;
    }
    return false;
}

function escapeQuotationMark(str) {
	if (typeof str == "string") {
		//return str.replace(/"/g,'&quot;');
		return str.replace(/"/g,'\\"');
	}
	return str;
}

function htmlEncode(value){
	value = removeMtag(value);
	return $('<div/>').text(value).html();
}

function htmlDecode(value){
	value = value.replace(/\n{2,}/g,'\n');
	return $('<div/>').html(value).text().replace(/^\n+|\n+$/g,'');
}

function htmlEscapeWithoutBrTag(value) {
	if (typeof value == "undefined") return '';

	value = value.replace(/<br[ ]*[/]?>/g, '<br />')
	var valueArr = value.split('<br />'),
		value = '',
		len = valueArr.length;
	for (var i = 0; i < len; i++) {
		if (!(len == i+1 && valueArr[i] == '')) {
			value += htmlEncode(valueArr[i]) + '<br />';
		}
		if (len == i+1 && valueArr[i] == '') {
			value += htmlEncode(valueArr[i]) + '<br />';
		}
		
	}
	value = value.replace(/&amp;nbsp;/g, ' ');
	return value;
}

function setupDynamicYSDialog(ysDialogLinkId, ysDialogTitle, ysDialogId, ahref, ysDialogContent, isIframe) {
	$('#YSDialog-'+ysDialogId + ' ahref').parent().remove();
	if ($('#' + ysDialogLinkId).length == 0) {
		$('body').append('<a id="' + ysDialogLinkId + '" href="' + ahref + '" style="display: none;"></a>');
		if (ysDialogContent) {
			$('body').append(ysDialogContent);
		}
		if (isIframe) {
			$('#' + ysDialogLinkId).YSDialog({iframe: true, dialogTitle: ysDialogTitle, dialogId: '-' + ysDialogId});
		}
		else {
			$('#' + ysDialogLinkId).YSDialog({dialogTitle: ysDialogTitle, dialogId: '-' + ysDialogId});
		}
	}
	else {
		$('.ysdialog').each(function() {
			if ('#' + $(this).attr('id') == ahref) {
				$(this).remove();
			}
		});
		if (ysDialogContent) {
			$('#' + ysDialogLinkId).append(ysDialogContent);
		}
	}
}

function openDynamicYSDialog(ysDialogLinkId, clickTargetId, aonclick) {
	var dynamicDialog = $('#' + ysDialogLinkId);
	if (aonclick) {
		$(clickTargetId).attr('onclick', aonclick);
	}
	dynamicDialog.click();
}

function setupDynamicYSModalDialog(ysDialogLinkId, ysDialogTitle, ysDialogId, ahref, ysDialogContent, isIframe, options) {
	$('#YSDialog'+ysDialogId + ' ahref').parent().remove();
	if ($('#' + ysDialogLinkId).length == 0) {
		$('body').append('<a id="' + ysDialogLinkId + '" href="' + ahref + '" style="display: none;" class="link-trigger-excepted"></a>');
		if (ysDialogContent) {
			$('body').append(ysDialogContent);
		}
		if (isIframe) {
			$('#' + ysDialogLinkId).YSModalDialog(Object.assign({iframe: true, dialogTitle: ysDialogTitle, dialogId: ysDialogId}, options || {}));
		}
		else {
			$('#' + ysDialogLinkId).YSModalDialog(Object.assign({dialogTitle: ysDialogTitle, dialogId: ysDialogId}, options || {}));
		}
	}
	else {
		//$('#YSDialog-'+ysDialogId).remove();
		if(ahref){
			$('#' + ysDialogLinkId).attr("href", ahref);
		}
		if (ysDialogContent) {
			$('#YSDialog'+ysDialogId + " .iziModal-content").html("").append(ysDialogContent);
		}
	}
}

function openDynamicYSModalDialog(ysDialogLinkId, clickTargetId, aonclick) {
	var dynamicModalDialog = $('#' + ysDialogLinkId);
	if (aonclick) {
		$(clickTargetId).attr('onclick', aonclick);
	}
	dynamicModalDialog.click();
}

function getNextModalZindex(){
	var max_zindex = 101;
	
	top.$(".iziModal:visible").each(function(){
		max_zindex = Math.max(max_zindex, parseInt($(this).css("z-index") || max_zindex));
	});
	
	return max_zindex + 2;
}
function setModalOverlayColor(){
	return;
	//var topOverlay = $(".iziModal-overlay:visible").eq(($(".iziModal-overlay:visible").length || 1) - 1), 
	//		max_zindex = 0, bmax_zindex = parseInt(topOverlay.css("z-index") || max_zindex);
	var topOverlay = null, max_zindex = 0;
	top.$(".iziModal-overlay:visible").each(function(){
		if (parseInt($(this).css("z-index") || 0) > max_zindex){
			max_zindex = parseInt($(this).css("z-index"));
			topOverlay = $(this);
		}
		$(this).css("background-color","rgba(0, 0, 0, 0)");
		
	});
	if(topOverlay && topOverlay.length > 0){
		topOverlay.css("background-color","rgba(0, 0, 0, 0.4)");
	}
	return topOverlay;
}
function addModalCloseButton(modal){
	modal.$wrap.parent().remove(".icon-close");
	modal.$wrap.after(`<button data-izimodal-close="" class="icon-close fa fa-times" style="z-index: ${getNextModalZindex()};"></button>`);
	$('.formError').remove(); // Clear validation error message
}

function YSBtnDisable(btnSelector) {
	let btn = $(btnSelector);
	btn.addClass('btn-disabled');
	btn.addClass('is-disabled');
}

function YSBtnEnable(btnSelector) {
	let btn = $(btnSelector);
	btn.removeClass('btn-disabled');
	btn.removeClass('is-disabled');
}

$.fn.YSPagination = function(options) {
	var pageNum = 1, totalPageNum = 1, totalItemNum = 0, itemInfo = '', rowNumPerPage = 5,
		thisObject = $(this), pf, pp, pn, pl, itemFrom = 0, itemTo = 0, pagination = '',
		rowNumPerPageHtml = '<li><select id="rowNumPerPage" name="rowNumPerPage"><option value="5">5</option><option value="10">10</option><option value="15">15</option><option value="20">20</option></select></li>',
		refreshAllPage = false, adminFlag = false;

	pageNum = options.pageNum ? parseInt(options.pageNum) : pageNum;
	rowNumPerPage = options.rowNumPerPage ? parseInt(options.rowNumPerPage) : rowNumPerPage;
	refreshAllPage = options.refreshAllPage ? options.refreshAllPage : refreshAllPage;
	adminFlag = options.adminFlag ? options.adminFlag : adminFlag;

	if (adminFlag) {
		rowNumPerPageHtml = '<li><select id="rowNumPerPage" name="rowNumPerPage"><option value="5">5</option><option value="10">10</option><option value="20">20</option><option value="50">50</option><option value="100">100</option></select></li>';
	}

	if (options.totalItemNum && options.totalItemNum != '') {
		totalItemNum = options.totalItemNum ? parseInt(options.totalItemNum) : totalItemNum;
		totalPageNum = totalItemNum % rowNumPerPage == 0 ? totalItemNum / rowNumPerPage : totalItemNum / rowNumPerPage + 1;
		totalPageNum = parseInt(totalPageNum);

		itemFrom = (pageNum - 1) * rowNumPerPage + 1;
		itemTo = pageNum < totalPageNum ? pageNum * rowNumPerPage : ((pageNum - 1) * rowNumPerPage + (totalItemNum % rowNumPerPage == 0 ? rowNumPerPage : totalItemNum % rowNumPerPage));

		if (totalItemNum > 0) {
			itemInfo = totalItemNum+'件中の'
				+ itemFrom + '～' + itemTo +'件を表示';
		}
	}
	if (options.itemsPerPage) {
		rowNumPerPageHtml = '<li><select id="rowNumPerPage" name="rowNumPerPage">';
		var itemsPerPageArr = options.itemsPerPage.split('-');
		for (var i = 0; i < itemsPerPageArr.length; i++) {
			if (itemsPerPageArr[i] != '') {
				rowNumPerPageHtml += '<option value="' + itemsPerPageArr[i] + '">' + itemsPerPageArr[i] + '</option>';
			}
		}
		rowNumPerPageHtml += '</select></li>';
	}
	pagination = '<ul class="pagination">'
		+ '<li><a href="javascript:;" id="page-first" data-page="1" class="move"><i class="fa fa-step-backward"></i></a></li>'
		+ '<li><a href="javascript:;" id="page-prev" class="move"><i class="fa fa-play fa-flip-horizontal"></i></a></li>'
		+ '<li><span id="totalPageNum"></span>ページ中</li>'
		+ '<li><input type="text" class="page-num"></li>'
		+ '<li><a href="javascript:;" id="page-next" class="move"><i class="fa fa-play"></i></a></li>'
		+ '<li><a href="javascript:;" id="page-last" class="move"><i class="fa fa-step-forward"></i></a></li>'
		+ rowNumPerPageHtml
		+ '<li id="totalItemNum" style="margin-left: 20px;"></li>'
		+ '</ul>';
	thisObject.empty().html(pagination);
	thisObject.find('.page-num').val(pageNum);
	thisObject.find('#totalPageNum').text(totalPageNum);
	thisObject.find('#totalItemNum').text(itemInfo);
	if (totalItemNum == 0) {thisObject.hide();}

	setPageButtonState(rowNumPerPage);

	thisObject.find('#rowNumPerPage').unbind('change').change(function() {
		if (refreshAllPage) {
			var url = options.url + '?page=1&count=' + thisObject.find('#rowNumPerPage').val();
			if (options.params) {
				url += '&' + options.params;
			}
			location.href = url;
		}
		else {
			if (adminFlag) {
				var url = options.url;
				var postData = {};
				postData['pageNum'] = 1;
				postData['rowNumPerPage'] = thisObject.find('#rowNumPerPage').val();
				postData['sidx'] = options.sidx;
				postData['sord'] = options.sord;
				postData['pageSearchParam'] = options.pageSearchParam;
				postData['isSearchFlag'] = options.isSearchFlag;

				if (options.params) {
					let postDataItem = eval('(' +options.params + ')');
					if (postDataItem.constructor === Array) {
						postDataItem = postDataItem[0];
						for (var key in postDataItem) {
							postData[key] = postDataItem[key];
						}
					}
				}

				$(options.targetDiv).load(url,postData);
			}
			else {
				var url = options.url + '/1/' + thisObject.find('#rowNumPerPage').val() + '/y';
				if (options.params) {
					url += '?' + options.params;
				}
				$(options.targetDiv).load(url);
			}
		}
	});

	thisObject.find('#page-first, #page-prev, #page-next, #page-last').unbind('click').click(function() {
		if (!$(this).hasClass('disable')) {
			if (refreshAllPage) {
				var url = options.url + '?page=' + $(this).attr('data-page') + '&count=' + thisObject.find('#rowNumPerPage').val();
				if (options.params) {
					url += '&' + options.params;
				}
				location.href = url;
			}
			else {
				if (adminFlag) {
					var url = options.url;
					var postData = {};
					postData['pageNum'] = $(this).attr('data-page');
					postData['rowNumPerPage'] = thisObject.find('#rowNumPerPage').val();
					postData['sidx'] = options.sidx;
					postData['sord'] = options.sord;
					postData['pageSearchParam'] = options.pageSearchParam;
					postData['isSearchFlag'] = options.isSearchFlag;

					if (options.params) {
						let postDataItem = eval('(' +options.params + ')');
						if (postDataItem.constructor === Array) {
							postDataItem = postDataItem[0];
							for (var key in postDataItem) {
								postData[key] = postDataItem[key];
							}
						}
					}
					$(options.targetDiv).load(url, postData);
				}
				else {
					var url = options.url + '/' + $(this).attr('data-page') + '/' + thisObject.find('#rowNumPerPage').val() + '/y', postData = {};
					if (options.params) {
						//url += '?' + options.params;
						let postDataItem = options.params.split('&');

						if (postDataItem.constructor === Array) {
							for (let i = 0; i < postDataItem.length; i++) {
								let postDataItemArr = postDataItem[i].split('='),
									postDataKey = postDataItemArr[0],
									postDataVal = postDataItemArr[1];

								if (postDataKey) {
									postData[postDataKey] = postDataVal;
								}
							}
						}
					}
					$(options.targetDiv).load(url, postData);
				}
			}
		}
		return false;
	});

	function setPageButtonState() {
		var pf = thisObject.find("#page-first"), pp = thisObject.find("#page-prev"), pn = thisObject.find("#page-next"), pl = thisObject.find("#page-last"),
			ppNum = 1, pnNum = 1;

		thisObject.find('#rowNumPerPage').val(rowNumPerPage);

		if (parseInt(pageNum) == 1) {
			pf.addClass('disable');
			pp.addClass('disable');
		}
		else {
			ppNum = pageNum - 1;
			pf.removeClass('disable');
			pp.removeClass('disable');
		}

		if (parseInt(pageNum) == parseInt(totalPageNum)) {
			pnNum = totalPageNum;
			pn.addClass('disable');
			pl.addClass('disable');
		}
		else {
			pnNum = pageNum + 1;
			pn.removeClass('disable');
			pl.removeClass('disable');
		}

		pf.attr({'href': options.url + '/' + ppNum + '/' + rowNumPerPage, 'data-page': 1});
		pp.attr({'href': options.url + '/' + ppNum + '/' + rowNumPerPage, 'data-page': ppNum});
		pn.attr({'href': options.url + '/' + pnNum + '/' + rowNumPerPage, 'data-page': pnNum});
		pl.attr({'href': options.url + '/' + totalPageNum + '/' + rowNumPerPage, 'data-page': totalPageNum});
	}
};

function treeHelpBubbleOpen(obj) {
	var rel = $(obj).attr('rel');

	if (localStorage.helpDisplayFlag != 'Y' || ($('.tree-help-bubble-popup').length == 0 && typeof bubbleContents == 'undefined') || $('#vakata-contextmenu').css('visibility') == 'visible' || !rel) {
		return;
	}
	var position, msg, customWidth, dynamicDate;

	if (typeof bubbleContents != 'undefined') {
		var clazz = $(obj).attr('class'),
			bpTreeClass = /bp-tree-([A-Za-z0-9]+)/.exec(clazz);

		if (bpTreeClass != null) {
			bpTreeClass = bpTreeClass[0];
		}

		if (bpTreeClass == null || typeof bubbleContents[bpTreeClass] == 'undefined' || $.trim(removeMtag(bubbleContents[bpTreeClass]['msg'])) == '') {
			return;
		}

		position = bubbleContents[bpTreeClass]['position'];
		msg = bubbleContents[bpTreeClass]['msg'];
		customWidth = bubbleContents[bpTreeClass]['width'];

		bubblePopupTimeout = setTimeout(function() {$('.jstree-hovered').YSBubblePopup({ position: position, msg: msg, width: customWidth, bubbleType: 'tree_help' });}, 0);
		return;
	}

	if (rel == 'drive' || rel == "folder" || rel == 'default' || rel == 'folder2' || rel == 'folder3') {

		var treeHelpContent = $(obj).closest('.jstree-wrap').next('div');

		if (!treeHelpContent.hasClass('tree-help-bubble-popup') || treeHelpContent.find('.tree-' + rel + '-help-bubble-popup').length == 0) {
			return;
		}

		var $helpBubblePopup = treeHelpContent.find('.tree-' + rel + '-help-bubble-popup');

		position = $helpBubblePopup.attr('position');
		msg = $helpBubblePopup.attr('guidance');
		customWidth = $helpBubblePopup.attr('custom-width');
		dynamicDate = $helpBubblePopup.attr('dynamic-date');

		if (dynamicDate) {
			var nodeName = $(obj).children('a').children('span').text();
			msg = msg.replace(dynamicDate, nodeName);
		}

		bubblePopupTimeout = setTimeout(function() {$('.jstree-hovered').YSBubblePopup({ position: position, msg: msg, width: customWidth, bubbleType: 'tree_help' });}, 0);
	}
}

function treeHelpBubbleClose() {
	$('.bubble_popup_box').remove();
	if (typeof bubblePopupTimeout != 'undefined') {
		clearTimeout(bubblePopupTimeout);
	}
}

function getStringLength(str) {
	var i = 0, len = str.length, result = 0;
	while (i < len) {
		result++;
		var x = str.charCodeAt(i++);
		if (0xD800 <= x && x < 0xDC00) i++;
	}
	return result;
}

function getStringByteSize(str) {
	return (new Blob([str], {type: "text/plain"})).size;
}